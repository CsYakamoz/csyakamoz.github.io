<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CsYakamoz`s Blog</title>
    <link>https://csyakamoz.github.io/</link>
    <description>Recent content on CsYakamoz`s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 02 Apr 2021 23:55:18 +0800</lastBuildDate><atom:link href="https://csyakamoz.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Nodejs 与 Java 的加解密</title>
      <link>https://csyakamoz.github.io/post/nodejs-crypto-with-java/</link>
      <pubDate>Fri, 02 Apr 2021 23:55:18 +0800</pubDate>
      
      <guid>https://csyakamoz.github.io/post/nodejs-crypto-with-java/</guid>
      <description>问题 最近在对接第三方接口, 对方是用 Java 写的 rsa 加密;
 其提供的加解密 Demo 类似于此链接中的 RSAUtils 类
 个人选择使用 node-rsa 进行解密;
然而, 在尝试解密过程中, 总是报各种错误, 且根据错误去 google 也无法找到解决方案;
最后无意中找到一篇文章, 其说明了为什么解密失败;
 吐槽下, google 关键词居然是 Node RSA Java, 难以置信 😑
 原因 node-rsa for javascript new NodeRSA([keyData, [format]], [options]); options 参数中的 encryptionScheme 是用来指定 padding;
其支持两种: pkcs1_oaep 和 pkcs1, 若未指定, 则默认是前者;
Cipher for Java // Demo 中所指定的加密方案 KeyFactory keyFactory = KeyFactory.getInstance(&amp;#34;RSA&amp;#34;); // keyFactory.getAlgorithm() 返回 &amp;#34;RSA&amp;#34; Cipher cipher = Cipher.</description>
    </item>
    
    <item>
      <title>What Did the require Do in Node.js</title>
      <link>https://csyakamoz.github.io/post/what-did-the-require-do-in-nodejs/</link>
      <pubDate>Thu, 18 Mar 2021 00:15:13 +0800</pubDate>
      
      <guid>https://csyakamoz.github.io/post/what-did-the-require-do-in-nodejs/</guid>
      <description>Warning: 最新版本的 Node.js 已经更新了 require 的逻辑, 此文章的相关代码已过时, 但逻辑总体上不变;
或者直接看源码 node/lib/internal/modules/cjs/
 Environment Node Version: v11.1.0
Prepare We have two file in /home/csyakamoz/Desktop/test directory.
index.js
require(&amp;#34;./a&amp;#34;); a.js
let i = 0; module.exports = () =&amp;gt; { console.log(++i); }; Start makeRequireFunction Notice:
 mod is the module object of index.js  function makeRequireFunction(mod) { const Module = mod.constructor; function require(path) { // 👉 start here, and path is &amp;#34;./a&amp;#34;  try { exports.</description>
    </item>
    
    <item>
      <title>JavaScript 中 isNaN 和 Number.isNaN 的区别</title>
      <link>https://csyakamoz.github.io/post/javascript-isnan-vs-number.isnan/</link>
      <pubDate>Tue, 16 Mar 2021 14:37:33 +0800</pubDate>
      
      <guid>https://csyakamoz.github.io/post/javascript-isnan-vs-number.isnan/</guid>
      <description>isNaN vs Number.isNaN isNaN: 判断参数是否为 NaN 本身, 或者无法转为数字.
Number.isNaN: 仅判断参数是否为 NaN 本身(完全匹配, 类似于 ===).
例如:
isNaN({}); // &amp;lt;- true, {} is not a number // {} 无法转为数字  isNaN(&amp;#34;ponyfoo&amp;#34;); // &amp;lt;- true, &amp;#34;ponyfoo&amp;#34; is not a number // &amp;#34;ponyfoo&amp;#34; 无法转为数字  isNaN(NaN); // &amp;lt;- true, NaN is not a number // NaN 本身  isNaN(&amp;#34;pony&amp;#34; / &amp;#34;foo&amp;#34;); // &amp;lt;- true, &amp;#34;pony&amp;#34;/&amp;#34;foo&amp;#34; is NaN, NaN is not a number // &amp;#34;pony&amp;#34; 和 &amp;#34;foo&amp;#34; 皆无法转为数字, 故 &amp;#39;/&amp;#39; 操作符的结果是 NaN  isNaN(&amp;#34;123&amp;#34;); // &amp;lt;- false, &amp;#34;123&amp;#34; 可转为数字  Number.</description>
    </item>
    
    <item>
      <title>面试题目 - 1</title>
      <link>https://csyakamoz.github.io/post/interview-question-001/</link>
      <pubDate>Mon, 15 Mar 2021 23:10:33 +0800</pubDate>
      
      <guid>https://csyakamoz.github.io/post/interview-question-001/</guid>
      <description>记录一次笔试中的题目
 MySQL 中 truncate, drop, delete 的区别 摘自 TRUNCATE TABLE vs. DELETE vs. DROP TABLE: Removing Tables and Data in SQL
 google 关键词: truncate drop delete mysql
 delete delete 是 DML (Data Manipulation Language) 命令;
此命令从表中删除记录; 它只用于从表中删除记录, 而不是从数据库中删除表;
语法:
-- 删除表 tb_name 中的所有记录 delete from tb_name; -- 删除表 tb_name 中满足 condition 条件的记录 delete from tb_name where condition  如果你不想删除表结构或者仅想删除特定记录, 可使用 delete; 此命令可以删除一个, 一些或全部记录; 该命令执行成功时, 会返回此次执行中被删除记录数; delete 命令在执行中会使用行锁且可回滚; 每个被删除的记录都会被锁; delete 会保持自增 ID(auto-increment ID) 的值; 例如删除了最新的记录, 其 ID 为 20, 然后再次插入新记录, 则该记录的 ID 为 21 - 即使它前面那条记录是 19;  truncate truncate 类似于 delete, 但它是 DDL (Data Definition Language) 命令;</description>
    </item>
    
    <item>
      <title>Shell 零碎笔记</title>
      <link>https://csyakamoz.github.io/post/shell-chore/</link>
      <pubDate>Fri, 22 Jan 2021 00:19:44 +0800</pubDate>
      
      <guid>https://csyakamoz.github.io/post/shell-chore/</guid>
      <description>命令补全 官方文档: man bash, 按 /, 输入 Programmable Completion 回车
团子的小窝 - 编写 Bash 补全脚本
如何编写 bash 自动补全脚本
检查某命令是否存在 来源: How can I check if a program exists from a Bash script?
command -v &amp;lt;the_command&amp;gt; 例子:
if ! command -v COMMAND &amp;amp;&amp;gt; /dev/null then echo &amp;#34;COMMAND could not be found&amp;#34; exit fi  &amp;amp;&amp;gt; 的意思可见: What are the shell&amp;rsquo;s control and redirection operators? or What&amp;rsquo;s the accurate meaning of “exec &amp;amp;&amp;gt;/var/log/a.</description>
    </item>
    
    <item>
      <title>RabbitMQ 交换机类型</title>
      <link>https://csyakamoz.github.io/post/rabbitmq-exchange-type/</link>
      <pubDate>Wed, 09 Sep 2020 16:38:46 +0800</pubDate>
      
      <guid>https://csyakamoz.github.io/post/rabbitmq-exchange-type/</guid>
      <description>RabbitMQ 的交换机共有四种类型。
 fanout - 扇形 direct - 直连 topic - 主题 headers - 头（尚未了解，此文不说明）  /** * 发布消息到指定交换机 * @param {string} exchange - 交换机名 * @param {string} routingKey - 该消息的路由键 * @param {string} content - 消息内容 */ channel.publish(exchange, routingKey, content); /** * 将队列与交换机进行绑定 * @param {string} queue - 队列名 * @param {string} exchange - 交换机名 * @param {string} bindingKey - 绑定路由 */ change.bindQueue(queue, exchange, bindingKey); fanout fanout 翻译成扇形，如同其外形，该类型交换机只是将接收到的所有消息广播给与它绑定的所有队列
对于 fanout 交换机，publish 会无视 routingKey 参数，bindQueue 会无视 bindingKey 参数</description>
    </item>
    
    <item>
      <title>RabbitMQ 笔记</title>
      <link>https://csyakamoz.github.io/post/rabbitmq-note/</link>
      <pubDate>Wed, 09 Sep 2020 16:35:55 +0800</pubDate>
      
      <guid>https://csyakamoz.github.io/post/rabbitmq-note/</guid>
      <description>RabbitMQ 官方教程
名词 生产者 (Producing): 发送消息到交换机
路由键 (Routing Key): 消息属性，由生产者在发送消息时声明
交换机 (Exchange): 接受来自生产者的消息，并将消息分发给满足条件的队列
绑定路由 (Binding Key): 用于绑定交换机与队列
队列 (Queue): 消息存储的地方；接受来自交换机的消息，并在存有消费者的情况下，将消息发给消费者
消费者 (Consuming): 从队列中接收消息，并做对应的处理
消息传递流程 生产者 -&amp;gt; 交换机 -&amp;gt; 队列 -&amp;gt; 消费者
  生产者的每个消息只能发给一个交换机；生成者发送的时候，可指定该消息的路由键
  交换机每收到一个消息，则将该消息发送给满足条件的队列；若没有队列满足条件，则丢弃该消息
交换机是否转发给队列，由交换机类型，交换机队列的绑定路由共同决定
交换机可以跟多个队列使用绑定路由，也可以跟同个队列绑定不同的绑定路由
  队列收到消息后，会存储该消息，直到有消费者订阅该队列
  代码样例 // Producing  const amqp = require(&amp;#34;amqplib&amp;#34;); const ExchangeName = &amp;#34;exchange-name&amp;#34;; const ExchangeType = &amp;#34;exchange-type&amp;#34;; // fanout | direct | topic | headers  const MsgRoutingKey = &amp;#34;msg-routing-key&amp;#34;; (async () =&amp;gt; { const connection = await amqp.</description>
    </item>
    
    <item>
      <title>Git 笔记</title>
      <link>https://csyakamoz.github.io/post/git-note/</link>
      <pubDate>Wed, 09 Sep 2020 16:29:42 +0800</pubDate>
      
      <guid>https://csyakamoz.github.io/post/git-note/</guid>
      <description>初始化 git config --global user.name &amp;#34;your name&amp;#34; git config --global user.email &amp;#34;yourEmail@example.com&amp;#34; 文件的状态  未跟踪 (untracked) 已跟踪 (tracked)  未修改 (unmodified) 已修改 (modified) 已暂存 (staged) 已提交 (committed)     未修改和已提交本质上是同一种状态
 三个工作区域  工作目录 (Working Directory) 暂存区域 (Staging Area) 仓库 (Repository)  gitignore   开头结尾皆无 /, 表示忽略所有符合规则的文件或目录；
  以 / 结尾表示忽略目录，dist/ 即忽略所有 dist 目录；
  以 / 开头表示忽略相对于根目录的目标，/.setting 即忽略根目录下的 .setting 文件或目录，/dist/ 即忽略根目录下的 dist 目录；
  !</description>
    </item>
    
    <item>
      <title>Javascript this 的指向</title>
      <link>https://csyakamoz.github.io/post/javascript-this/</link>
      <pubDate>Wed, 09 Sep 2020 16:14:29 +0800</pubDate>
      
      <guid>https://csyakamoz.github.io/post/javascript-this/</guid>
      <description>// Notice: the environment is Node.js  global.val = &amp;#34;global&amp;#34;; this.val = &amp;#34;exports&amp;#34;; function normalFun() { console.log(this.val); } const funcExpression = function () { console.log(this.val); }; const arrowFun = () =&amp;gt; { console.log(this.val); }; const scope = { val: &amp;#34;obj&amp;#34;, a: function () { console.log(this.val); }, b: () =&amp;gt; { console.log(this.val); }, c: function () { return () =&amp;gt; { console.log(this.val); }; }, d: function () { return function () { console.</description>
    </item>
    
    <item>
      <title>forEach With Async Function in Js</title>
      <link>https://csyakamoz.github.io/post/javascript-foreach-with-async-func/</link>
      <pubDate>Wed, 09 Sep 2020 14:05:20 +0800</pubDate>
      
      <guid>https://csyakamoz.github.io/post/javascript-foreach-with-async-func/</guid>
      <description>const sleep = (ms) =&amp;gt; new Promise((resolve) =&amp;gt; setTimeout(() =&amp;gt; resolve(ms), ms * 1000)); 假设我们需要对数组中的三个元素进行异步操作，而且要按顺序。
即，对数组中的元素按顺序调用异步函数（本文为 sleep)，我们也许会用 Array.prototype.forEach 写出下面的代码：
(async () =&amp;gt; { const begin = Date.now(); const arr = [1, 2, 3]; arr.forEach(async (num) =&amp;gt; { console.log(await sleep(num)); }); console.log(&amp;#34;finish&amp;#34;); const end = Date.now(); console.log(`time: ${end - begin}`); })(); 我们期待的结果为：
1 2 3 finish time: x // x &amp;gt;= 6000 但执行上述代码后，你将获得如下结果：
finish time: x // x &amp;lt; 1000 1 2 3 我们先看看 Array.</description>
    </item>
    
    <item>
      <title>Xor Cipher - 异或加密的应用场景之一</title>
      <link>https://csyakamoz.github.io/post/xor-cipher/</link>
      <pubDate>Wed, 09 Sep 2020 13:24:09 +0800</pubDate>
      
      <guid>https://csyakamoz.github.io/post/xor-cipher/</guid>
      <description>异或加密是一种简单的加密算法。
具体内容请看下列文章：
 XOR cipher XOR 加密简介  本文只讨论个人所应用到的场景。
需求 在工作中，个人经常遇到使用 UUID 作为各种对象 ID 的场景。
例如：对于每一个 song，我们都为其生成唯一的 quiz，song &amp;amp; quiz 的 ID 都是 uuid；因此，每一个 song 都和其唯一的 quiz 绑定。
需求是：songId &amp;amp; quizId 可以双向查找；即，可通过 songId 查找到对应的 quizId，也可通过 quizId 查找到对应的 songId。
解决方案 方案 0 - 数据库存储映射 两种存储方式：
 song 表添加 quizId 列，quiz 表则添加 songId 列 建立新表 song-quiz, songId 和 quizId 作为联合主键  方案 2 - 异或加密当作映射 如果不想将映射关系存到数据库中，则可以使用异或加密。
使用异或后，我们所需存储的仅有 key。
Wiki 上有 python 的实现方案，这里则展示 Node.</description>
    </item>
    
    <item>
      <title>Shell 基础</title>
      <link>https://csyakamoz.github.io/post/shell-basic/</link>
      <pubDate>Wed, 09 Sep 2020 11:35:19 +0800</pubDate>
      
      <guid>https://csyakamoz.github.io/post/shell-basic/</guid>
      <description>Lint  ShellCheck, a static analysis tool for shell scripts
 建议使用 ShellCheck, 以检查脚本中潜在的问题
Shebang shebang 即 #! , 其后面跟的是解释当前脚本的解释器路径
e.g.
 #!/bin/bash #!/usr/bin/bash #!/usr/bin/env bash  个人习惯用 #!/usr/bin/env NAME 而不是 #!/usr/bin/NAME
原因请看此：Why is it better to use “#!/usr/bin/env NAME” instead of “#!/path/to/NAME” as my shebang?
变量 定义 variable=value
 不需要指定变量类型，即不需要说明是整型类型，还是字符串类型等等 等号两侧不能有空格  使用  $variable ${variable}  {} 是可选的，但建议都加上，加 {} 是为了帮助解释器识别变量的边界
for skill in Ada Coffe Action Java; do echo &amp;#34;I am good at ${skill}Script&amp;#34; done 如果不给 skill 加上花括号，解释器会把 skillScript 当作变量，在上面的情况下，其值为空</description>
    </item>
    
    <item>
      <title>MacOS 修复音视频无法正常播放问题</title>
      <link>https://csyakamoz.github.io/post/mac-fix-sound/</link>
      <pubDate>Wed, 09 Sep 2020 11:32:06 +0800</pubDate>
      
      <guid>https://csyakamoz.github.io/post/mac-fix-sound/</guid>
      <description>内容来源：mac 音频及视频均无法正常播放，怎么解决？
表现现象：
  音乐播放器无法播放，进度条停留在起始点，且为缓冲状态，但网络是正常
  BiliBili 也无法播放音频，进度条同上，但网络是正常
  任何可以让 mac 发出声音的行为均不出声
  重启一切正常
  解决办法：terminal 下输入 sudo killall coreaudiod</description>
    </item>
    
    <item>
      <title>Tmux 笔记</title>
      <link>https://csyakamoz.github.io/post/tmux-note/</link>
      <pubDate>Wed, 09 Sep 2020 11:26:08 +0800</pubDate>
      
      <guid>https://csyakamoz.github.io/post/tmux-note/</guid>
      <description>Tmux with iTerm2  iTerm2 is integrated with tmux, allowing you to enjoy a native user interface with all the benefits of tmux&amp;rsquo;s persistence.
 MacOS 用户建议使用 iTerm2 的 Tmux 特性
使用方法，请看文档：https://www.iterm2.com/documentation-tmux-integration.html
Notice: 远程服务器也能使用，但 tmux 版本至少为 1.8, 但推荐 2.3 及之后
配置 有时候需要使用原生 tmux, 此时使用该配置
安装 curl &amp;#39;https://raw.githubusercontent.com/CsYakamoz/config/master/tmux/.tmux.conf&amp;#39; -o &amp;#34;${HOME}/.tmux.conf&amp;#34; 常用命令和快捷键 prefix- 则意味着需要先按 prefix 键
Session # 创建新 session tmux [new -s session-name] # 恢复 session tmux a [-t session-name] # 列出所有 session tmux ls # 关闭特定的 session tmux kill-session -t session-name # 关闭所有 session tmux kill-server # 创建新 session prefix-:new [-s session-name] # 列出所有 session prefix-s # 重命名当前 session prefix-$ # 退出当前 session prefix-d Window # 创建新 window prefix-c # 列出所有 window prefix-w # 关闭当前 window prefix-&amp;amp; # 前一个 window prefix-p # 后一个 window prefix-n # 重命名当前 window prefix-, # 调整 window 排序 source 默认是当前窗口序号，target 是目标窗口序号 prefix-:swap-window [-s source] -t target # 跳转到第 n 个 window prefix-n（数字） Pane # 垂直分割 prefix-| # 水平分割 prefix-- # 关闭当前 pane prefix-x # 显示 pane 编号，在编号消失前输入对应的数字可切换到相应的 pane prefix-q # 切换 pane 布局 prefix-&amp;lt;space&amp;gt; # 光标移动到左，下，上，右方的 pane prefix-h, j, k, l # 当前窗格往左，下，上，右方扩大 5 格，^ 为 Ctrl prefix-^h, ^j, ^k, ^l # 临时最大化当前 pane, 再次使用则恢复 prefix-z # 当前 pane 与上一个 pane 交换位置 prefix-{ # 当前 pane 与下一个 pane 交换位置 prefix-} # 当前 pane 移到新的 window 中 prefix-!</description>
    </item>
    
    <item>
      <title>常用软件记录</title>
      <link>https://csyakamoz.github.io/post/software/</link>
      <pubDate>Wed, 09 Sep 2020 11:24:18 +0800</pubDate>
      
      <guid>https://csyakamoz.github.io/post/software/</guid>
      <description>记录个人常用的软件
Application Typora: Typora is a minimal markdown editor, providing new ways for reading and writing markdown.
iTerm2: iTerm2 is a replacement for Terminal and the successor to iTerm.
Snipaste: Snipaste is a simple but powerful snipping tool, and also allows you to pin the screenshot back onto the screen.
Notion: All-in-one workspace.
Dash: Dash gives your Mac instant offline access to 200+ API documentation sets.
Alfred: Alfred is an award-winning app for macOS which boosts your efficiency with hotkeys, keywords, text expansion and more.</description>
    </item>
    
    <item>
      <title>Shell 序列表达式</title>
      <link>https://csyakamoz.github.io/post/shell-sequence-expression/</link>
      <pubDate>Wed, 09 Sep 2020 11:18:01 +0800</pubDate>
      
      <guid>https://csyakamoz.github.io/post/shell-sequence-expression/</guid>
      <description>格式：{FIRST..LAST[..INCREMENT]}
FIRST 和 LAST 是必需的，用 .. 分隔，中间没有空格，INCREMENT 是可选滴
Example echo {1..3} # 1 2 3 echo {3..1} # 3 2 1 echo {0..20..5} # 0 5 10 15 20 echo 0{8..10} # 08 09 010 echo {08..10} # 08 09 10 echo {a..f} # a b c d e f echo {f..a} # f e d c b a echo T-{a..f}-T # T-a-T T-b-T T-c-T T-d-T T-e-T T-f-T echo {A..z} # A B C D E F G H I J K L M N O P Q R S T U V W X Y Z [ \ ] ^ _ ` a b c d e f g h i j k l m n o p q r s t u v w x y z echo {z.</description>
    </item>
    
    <item>
      <title>Shell 按行处理文本</title>
      <link>https://csyakamoz.github.io/post/shell-handle-text-by-line/</link>
      <pubDate>Wed, 09 Sep 2020 11:15:00 +0800</pubDate>
      
      <guid>https://csyakamoz.github.io/post/shell-handle-text-by-line/</guid>
      <description>内容来源：【Shell 脚本】逐行处理文本文件
read cat data.dat | while read line do echo &amp;#34;${line}&amp;#34; done # or while read line do echo &amp;#34;${line}&amp;#34; done &amp;lt; data.dat awk cat data.dat | awk &amp;#39;{print $0}&amp;#39; for &amp;hellip; in &amp;hellip; for var in content 表示变量 var 在 content 中循环取值，取值的分隔符由 ${IFS} 确定
for line in $(cat data.dat) do echo &amp;#34;${line}&amp;#34; done 如果输入文本每行中没有空格，则 line 在输入文本中按换行符分隔符循环取值。
如果输入文本中包括空格或制表符，则不是换行读取，line 在输入文本中按空格分隔符或制表符或换行符循环取值。
可以通过把 ${IFS} 设置为换行符来达到逐行读取的功能。
${IFS} 的默认值为：空白 （包括：空格，制表符，换行符）.</description>
    </item>
    
    <item>
      <title>Shell 使用模板文件生成文件</title>
      <link>https://csyakamoz.github.io/post/shell-build-file-from-template/</link>
      <pubDate>Wed, 09 Sep 2020 11:13:35 +0800</pubDate>
      
      <guid>https://csyakamoz.github.io/post/shell-build-file-from-template/</guid>
      <description>需求来源 有个模板文件，其占位符格式为：${variable}
现需要使用 shell 脚本来动态生成对应文件
实现 假设模板文件内容如下：
#!/usr/bin/env bash  version=&amp;#34;${version}&amp;#34; path=&amp;#34;${path}&amp;#34; 则动态生成对应文件的 shell 脚本可以如下：
#!/usr/bin/env bash  version=&amp;#34;1.0.0&amp;#34; path=&amp;#34;oh my god&amp;#34; sed \  -e &amp;#34;s/\${version}/${version}/g&amp;#34; \  -e &amp;#34;s/\${path}/${path}/g&amp;#34; \  path_to_template_file \  &amp;gt; path_to_output_file 需要注意的坑 一般我们使用 / 作为 sed 的定界符，但若变量值中包含 /, 则会导致 sed 解析失败
因此我们需要对 / 进行转义
#!/usr/bin/env bash  function handlingSlash() { echo &amp;#34;$1&amp;#34; | sed -e &amp;#34;s/\//\\\\\//g&amp;#34; } version=&amp;#34;1.0.0&amp;#34; path=$(handlingSlash &amp;#34;${HOME}/Desktop/avatar.jpeg&amp;#34;) sed \  -e &amp;#34;s/\${version}/${version}/g&amp;#34; \  -e &amp;#34;s/\${path}/${path}/g&amp;#34; \  path_to_template_file \  &amp;gt; path_to_output_file 参考 How to replace ${} placeholders in a text file?</description>
    </item>
    
    <item>
      <title>Shell 打印彩色输出</title>
      <link>https://csyakamoz.github.io/post/shell-print-color-output/</link>
      <pubDate>Wed, 09 Sep 2020 11:12:07 +0800</pubDate>
      
      <guid>https://csyakamoz.github.io/post/shell-print-color-output/</guid>
      <description>格式说明 ESC[{attr1};...;{attrN}m
ESC: 转义字符，可选项为 \033, \x1b, \e 表示
m: 母鸡
attr: 控制代码（参见下方表格）
样例 简单的
echo -e &amp;#34;\033[0;31mRed\033[0m&amp;#34; echo -e &amp;#34;\033[0;32mGreen\033[0m&amp;#34; echo -e &amp;#34;\033[1;31mHighlight Red\033[0m&amp;#34; echo -e &amp;#34;\033[1;3;31mHighlight Italic Red\033[0m&amp;#34; echo -e &amp;#34;\033[1;3;4;31mHighlight Italic Underline Red\033[0m&amp;#34; 完整的
# https://askubuntu.com/questions/27314/script-to-display-all-terminal-colors for x in {0..8}; do for i in {30..37}; do for a in {40..47}; do echo -ne &amp;#34;\e[$x;$i;$a&amp;#34;&amp;#34;m\\\e[$x;$i;$a&amp;#34;&amp;#34;m\e[0;37;40m &amp;#34; done echo done done echo &amp;#34;&amp;#34; 参考 以下表格皆来自：ANSI 转义序列
代码所对应的控制内容    代码 作用 备注     0 重置 / 正常 关闭所有属性   1 粗体或增加强度    2 弱化（降低强度） 未广泛支持   3 斜体 未广泛支持。有时视为反相显示   4 下划线    5 缓慢闪烁 低于每分钟 150 次   6 快速闪烁 MS-DOS ANSI.</description>
    </item>
    
    <item>
      <title>Shell 常用快捷键</title>
      <link>https://csyakamoz.github.io/post/shell-keyboard-shortcut/</link>
      <pubDate>Wed, 09 Sep 2020 11:06:40 +0800</pubDate>
      
      <guid>https://csyakamoz.github.io/post/shell-keyboard-shortcut/</guid>
      <description>Up, Ctrl + p, 向上移动光标或显示上一条命令
Down, Ctrl + n, 向下移动或显示下一条命令
Left, Ctrl + b, 光标向左移动一个字符
Right, Ctrl + f, 光标向右移动一个字符
BS, Ctrl + h, 删除光标左边的字符
Del, Ctrl + d, 删除光标右边的字符
Home, Ctrl + a, 跳转到行首
End, Ctrl + e, 跳转到行尾
 以上快捷键可在 Mac 中的大多数文本编辑区域使用
e.g.
 Google Chrome 的地址栏 Wechat 的聊天内容输入框   Ctrl + w, 删除光标左边一个单词
Alt + b, 光标向左移动一个单词
Alt + f, 光标向右移动一个单词
Alt + d, 删除光标右边的一个单词
Alt + BS, 删除光标左边的一个单词</description>
    </item>
    
    <item>
      <title>Node.js 创建本地模块</title>
      <link>https://csyakamoz.github.io/post/nodejs-crate-local-package/</link>
      <pubDate>Wed, 09 Sep 2020 11:00:07 +0800</pubDate>
      
      <guid>https://csyakamoz.github.io/post/nodejs-crate-local-package/</guid>
      <description>问题来源 在编写代码时，个人习惯会把通用实用模块放在项目根目录下
因为是通用实用模块，若项目层级较多，那么层级较深的文件引用该模块时，会出现这样的代码：
const Utils = require(&amp;#34;../../../../../../../utils&amp;#34;); 这么多的 .., 如果写少或写多一个 .., 就会报错
Oh, it makes me uncomfortable 😑
因此，需求是可以用简单的路径引用通用实用模块
Solution One 使用 module-alias, 简洁且易用
个人认为只有一个缺点 - 它更改 Module._resolveFilename 方法
Solution Two npm 和 yarn 现已支持安装本地模块
首先需要为本地模块添加 package.json 文件
 对于 package.json, 其 name, version 是必需的
 本地模块的名字为 package.json 的 name 字段，而不是本地模块所处目录名
假设本地模块相对于项目根目录的路径是 ./local-package-dir, 其在 package.json 文件中的 name 为 local-package
则安装本地模块的方法如下：
# 在 node_modules 中创建软链 local-package 指向 ../local-package-dir npm install ./local-package-dir # 拷贝 .</description>
    </item>
    
    <item>
      <title>Javascript 函数传参类型</title>
      <link>https://csyakamoz.github.io/post/javascript-function-parameter-type/</link>
      <pubDate>Wed, 09 Sep 2020 10:54:59 +0800</pubDate>
      
      <guid>https://csyakamoz.github.io/post/javascript-function-parameter-type/</guid>
      <description>曾经我一度将 javascript 函数传参类型分为两种：
 基本类型：值传递 引用类型：引用传递  后来我发现，其实都是值传递;
先说明为啥曾经认为引用类型，是引用传递：
function demo(obj) { obj.foo = &amp;#34;foo&amp;#34;; } let variable = {}; console.log(variable); // {}  demo(variable); console.log(variable); // { foo: &amp;#39;foo&amp;#39; } 外部向函数 demo 传递实参 (variable);
函数进行操作：向形参 (obj) 添加一个属性 (foo), 其值为 foo;
um&amp;hellip;, 函数内部的操作，会影响外部的变量，这是很像引用传递，但我们再看个例子：
function demo(obj) { obj = { foo: &amp;#34;foo&amp;#34; }; obj.bar = &amp;#34;bar&amp;#34;; } let variable = {}; console.log(variable); // {}  demo(variable); console.log(variable); // {} 为什么第二个输出依旧是 {} ?</description>
    </item>
    
    <item>
      <title>JavaScript 遍历对象属性顺序</title>
      <link>https://csyakamoz.github.io/post/javascript-iterate-object-property-order/</link>
      <pubDate>Wed, 09 Sep 2020 10:37:51 +0800</pubDate>
      
      <guid>https://csyakamoz.github.io/post/javascript-iterate-object-property-order/</guid>
      <description>问题来源 /** * @param {object} obj * @returns {any[]} */ function getValues(obj) { // some code or none  return Object.values(obj); } const [val0, val1, ..., valN] = getValues(obj); doSomethingFor0(val0); doSomethingFor1(val1); ... doSomethingForN(valN); getValues 函数参数是对象，返回值是数组
调用者传入对象，再对函数返回的数组，进行如下操作：
 对下标为 0 的元素做某事 0 对下标为 1 的元素做某事 1 &amp;hellip; 对下标为 N 的元素做某事 N  在这里，调用者认为，该数组元素排序顺序会如预期所想（声明顺序，插入顺序等等）
实际上，该数组元素排序顺序依赖于遍历对象属性顺序, 但遍历对象属性顺序有时并非等价于对象的声明（插入）顺序，故导致可能出现非预期结果
顺序规则 在 Google 查找相关资料后及个人测试，得到如下结果：
先以三个区间划分，然后区间内再各自排序
 非负整数（不包括 n.0 这种）区间，按照从小到大排序 普通的属性名区间，按照声明（插入）顺序排序 Symbol 区间，按照声明（插入）顺序排序  /** * Object.values() * Object.</description>
    </item>
    
    <item>
      <title>编码风格</title>
      <link>https://csyakamoz.github.io/post/coding-style/</link>
      <pubDate>Wed, 09 Sep 2020 10:32:18 +0800</pubDate>
      
      <guid>https://csyakamoz.github.io/post/coding-style/</guid>
      <description>ESLint  ESLint is a tool for identifying and reporting on patterns found in ECMAScript/JavaScript code, with the goal of making code more consistent and avoiding bugs.
 以下风格都会尽量补充对应的 eslint 规则（如果有且被我发现的话 😑
Notice: 请优先以团队约定为准！
缩进使用空格而不是制表符 尽管制表符更省空间，但还是更喜欢空格
 one tab is equal to 2, 4, 8 space
  no-tabs  坚持使用分号 纵然很多人依旧坚持不使用分号，但我就喜欢加分号，就这么滴。
 semi  坚持使用大括号 即使只有一条语句，也依旧要使用大括号；
同时，else 与 if 的 } 处在统一行；
// bad if (test) return false; else return true; // bad if (test) return false; else return true; // bad if (test) { return false; } else { return true; } // good if (test) { return false; } else { return true; }  curly brace-style nonblock-statement-body-position  const 优于 let, 弃用 var var 的坏处，此处不一一阐述；</description>
    </item>
    
    <item>
      <title>Node.js 调用微信小程序图片校验接口</title>
      <link>https://csyakamoz.github.io/post/nodejs-call-wechat-img-sec-check-api/</link>
      <pubDate>Wed, 09 Sep 2020 10:21:33 +0800</pubDate>
      
      <guid>https://csyakamoz.github.io/post/nodejs-call-wechat-img-sec-check-api/</guid>
      <description>const fs = require(&amp;#34;fs&amp;#34;); const request = require(&amp;#34;request&amp;#34;); request.post( { uri: &amp;#34;https://api.weixin.qq.com/wxa/img_sec_check?access_token=ACCESS_TOKEN&amp;#34;, formData: { // 方法 1  media: fs.createReadStream(&amp;#34;path_to_img&amp;#34;), // 方法 2  attachments: [ // 只认下标为 0 的  fs.createReadStream(&amp;#34;path_to_img&amp;#34;), // 下标 1 及之后的会被微信忽略  ..., ], // 方法 3  media: { value: buffer, options: { // 必须有 filename, 值可任意但不能为空串  filename: &amp;#34;default&amp;#34;, // contentType 可有可无，且值任意  contentType: &amp;#34;image/jpeg&amp;#34;, }, }, // 方法 4  media: request.get(&amp;#34;uri_to_img&amp;#34;), }, }, (error, resp, body) =&amp;gt; { if (error) { console.</description>
    </item>
    
    <item>
      <title>Node.js 支持的编码</title>
      <link>https://csyakamoz.github.io/post/nodejs-supported-encoding/</link>
      <pubDate>Wed, 09 Sep 2020 10:19:07 +0800</pubDate>
      
      <guid>https://csyakamoz.github.io/post/nodejs-supported-encoding/</guid>
      <description> ascii utf8 utf16le ucs2: alias of utf16le base64 latin1 binary: alias for latin1 hex  参考  List of encodings that Node.js supports Buffers and Character Encodings  </description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://csyakamoz.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://csyakamoz.github.io/about/</guid>
      <description>Nothing.</description>
    </item>
    
  </channel>
</rss>
