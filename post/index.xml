<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Awesome</title>
    <link>https://csyakamoz.github.io/post/</link>
    <description>Recent content in Posts on Awesome</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 27 Feb 2023 00:50:45 +0800</lastBuildDate><atom:link href="https://csyakamoz.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Golang Http RoundTripper</title>
      <link>https://csyakamoz.github.io/post/2023/02/27/golang-http-roundtripper/</link>
      <pubDate>Mon, 27 Feb 2023 00:50:45 +0800</pubDate>
      
      <guid>https://csyakamoz.github.io/post/2023/02/27/golang-http-roundtripper/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Json In Golang</title>
      <link>https://csyakamoz.github.io/post/2023/02/24/json-in-golang/</link>
      <pubDate>Fri, 24 Feb 2023 20:40:35 +0800</pubDate>
      
      <guid>https://csyakamoz.github.io/post/2023/02/24/json-in-golang/</guid>
      <description>这里仅记录个人认为重要的点:)
更详细的说明, 请查阅官方文档: encoding/json
基本知识 默认的类型映射:
Boolean -&amp;gt; JSON booleans Floating point, integer -&amp;gt; JSON numbers String -&amp;gt; JSON strings Array, slice -&amp;gt; JSON arrays []byte -&amp;gt; base64-encoded string nil slice -&amp;gt; JSON null Struct -&amp;gt; JSON objects Struct Field&amp;rsquo;s Tag with JSON 序列化 Struct 时, 只处理 Exported Field, 即首字母大写的字段
默认情况下, json 的 key 等价于字段名, 其他情况看如下说明:
1// Field appears in JSON as key &amp;#34;myName&amp;#34;. 2Field int `json:&amp;#34;myName&amp;#34;` 3 4// Field appears in JSON as key &amp;#34;myName&amp;#34; and 5// the field is omitted from the object if its value is empty, 6// as defined above.</description>
    </item>
    
    <item>
      <title>Shell 参数</title>
      <link>https://csyakamoz.github.io/post/2022/11/27/shell-%E5%8F%82%E6%95%B0/</link>
      <pubDate>Sun, 27 Nov 2022 23:48:08 +0800</pubDate>
      
      <guid>https://csyakamoz.github.io/post/2022/11/27/shell-%E5%8F%82%E6%95%B0/</guid>
      <description>Parameter 特殊参数 $0, 为当前脚本文件名 $?, 上一个命令的退出状态，或函数的返回值 $$, 当前 Shell 进程 ID 脚本或函数参数 $n, n 代表数字，从 1 开始，1 代表第一个参数，2 代表第二个参数，以此类推&amp;hellip;
$#, 传递到脚本或函数的参数个数 $@, 传递给脚本或函数的所有参数，&amp;quot;$1&amp;quot; &amp;quot;$2&amp;quot; ... &amp;quot;$n&amp;quot; $*, 传递给脚本或函数的所有参数，与 $@ 类似，但被 &amp;quot; 包含时，与 $@ 不同 $* 与 $@ 的区别 当它们不被 &amp;quot; 包含时，它们都相当于 &amp;quot;$1&amp;quot; &amp;quot;$2&amp;quot; ... &amp;quot;$n&amp;quot;
当它们被 &amp;quot; 包含时，&amp;quot;$*&amp;quot; 相当于 &amp;quot;$1 $2 ... $n&amp;quot;, &amp;quot;$@&amp;quot; 则不变</description>
    </item>
    
    <item>
      <title>Shell 输入/输出重定向</title>
      <link>https://csyakamoz.github.io/post/2022/11/27/shell-%E8%BE%93%E5%85%A5/%E8%BE%93%E5%87%BA%E9%87%8D%E5%AE%9A%E5%90%91/</link>
      <pubDate>Sun, 27 Nov 2022 23:15:09 +0800</pubDate>
      
      <guid>https://csyakamoz.github.io/post/2022/11/27/shell-%E8%BE%93%E5%85%A5/%E8%BE%93%E5%87%BA%E9%87%8D%E5%AE%9A%E5%90%91/</guid>
      <description>Input/Output Redirection 输入/输出重定向
标准输入/输出/错误输出 文件描述符 说明 0 输入文件 - 标准输入 1 输出文件 - 标准输出 2 错误输出文件 - 标准错误输出 &amp;lt;, &amp;gt; &amp;lt; 是输入重定向
&amp;gt; 是输出重定向
&amp;lt; filename 输入从 filename 中读取
&amp;lt;&amp;amp;N N 是一个文件描述符
输入从 N 中读取
[M]&amp;gt; filename Warning: M 和 &amp;gt; 之间不能有空格
M 是一个文件描述符，省略则默认是 1
将 M 的输出重定向到 filename, 若 filename 不存在，则创建，否则覆盖
[M]&amp;gt;&amp;gt; filename Warning: M 和 &amp;gt; 之间不能有空格
M 是一个文件描述符，省略则默认是 1
将 M 的输出重定向到 filename; 若 filename 不存在，则创建，否则追加到 N 的最后</description>
    </item>
    
    <item>
      <title>常用软件记录</title>
      <link>https://csyakamoz.github.io/post/2021/07/26/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Mon, 26 Jul 2021 00:43:00 +0800</pubDate>
      
      <guid>https://csyakamoz.github.io/post/2021/07/26/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E8%AE%B0%E5%BD%95/</guid>
      <description>记录个人常用的软件
Application Spotify: Spotify is a digital music service that gives you access to millions of songs.
Telegram: a new era of messaging
KeyCastr: KeyCastr, an open-source keystroke visualizer
Bob: Bob 是一款 macOS 平台翻译和 OCR 软件。
WezTerm: WezTerm is a GPU-accelerated cross-platform terminal emulator and multiplexer written by @wez and implemented in Rust
Excalidraw: Virtual whiteboard for sketching hand-drawn like diagrams.
draw.io: diagrams.net (formerly draw.io) is free online diagram software.</description>
    </item>
    
    <item>
      <title>Favorite</title>
      <link>https://csyakamoz.github.io/post/2021/05/04/favorite/</link>
      <pubDate>Tue, 04 May 2021 02:32:42 +0800</pubDate>
      
      <guid>https://csyakamoz.github.io/post/2021/05/04/favorite/</guid>
      <description>My Favorite
Movies The Intouchables - 触不可及
Green Book - 绿皮书
Begin Again
Anime 恋は雨上がりのように</description>
    </item>
    
    <item>
      <title>Nodejs 与 Java 的加解密</title>
      <link>https://csyakamoz.github.io/post/2021/04/02/nodejs-%E4%B8%8E-java-%E7%9A%84%E5%8A%A0%E8%A7%A3%E5%AF%86/</link>
      <pubDate>Fri, 02 Apr 2021 23:55:18 +0800</pubDate>
      
      <guid>https://csyakamoz.github.io/post/2021/04/02/nodejs-%E4%B8%8E-java-%E7%9A%84%E5%8A%A0%E8%A7%A3%E5%AF%86/</guid>
      <description>问题 最近在对接第三方接口, 对方是用 Java 写的 rsa 加密;
其提供的加解密 Demo 类似于此链接中的 RSAUtils 类
个人选择使用 node-rsa 进行解密;
然而, 在尝试解密过程中, 总是报各种错误, 且根据错误去 google 也无法找到解决方案;
最后无意中找到一篇文章, 其说明了为什么解密失败;
吐槽下, google 关键词居然是 Node RSA Java, 难以置信 😑
原因 node-rsa for javascript 1new NodeRSA([keyData, [format]], [options]); options 参数中的 encryptionScheme 是用来指定 padding;
其支持两种: pkcs1_oaep 和 pkcs1, 若未指定, 则默认是前者;
Cipher for Java 1// Demo 中所指定的加密方案 2KeyFactory keyFactory = KeyFactory.getInstance(&amp;#34;RSA&amp;#34;); 3 4// keyFactory.getAlgorithm() 返回 &amp;#34;RSA&amp;#34; 5Cipher cipher = Cipher.getInstance(keyFactory.getAlgorithm()); Cipher 文档如下:</description>
    </item>
    
    <item>
      <title>What Did the require Do in Node.js</title>
      <link>https://csyakamoz.github.io/post/2021/03/18/what-did-the-require-do-in-node.js/</link>
      <pubDate>Thu, 18 Mar 2021 00:15:13 +0800</pubDate>
      
      <guid>https://csyakamoz.github.io/post/2021/03/18/what-did-the-require-do-in-node.js/</guid>
      <description>Warning: 最新版本的 Node.js 已经更新了 require 的逻辑, 此文章的相关代码已过时, 但逻辑总体上不变;
或者直接看源码 node/lib/internal/modules/cjs/
Environment Node Version: v11.1.0
Prepare We have two file in /home/csyakamoz/Desktop/test directory.
index.js
1require(&amp;#34;./a&amp;#34;); a.js
1let i = 0; 2 3module.exports = () =&amp;gt; { 4 console.log(++i); 5}; Start makeRequireFunction Notice:
mod is the module object of index.js 1function makeRequireFunction(mod) { 2 const Module = mod.constructor; 3 4 function require(path) { 5 // 👉 start here, and path is &amp;#34;.</description>
    </item>
    
    <item>
      <title>Shell 中 while 循环变量引发的问题</title>
      <link>https://csyakamoz.github.io/post/2021/03/18/shell-%E4%B8%AD-while-%E5%BE%AA%E7%8E%AF%E5%8F%98%E9%87%8F%E5%BC%95%E5%8F%91%E7%9A%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Thu, 18 Mar 2021 00:11:44 +0800</pubDate>
      
      <guid>https://csyakamoz.github.io/post/2021/03/18/shell-%E4%B8%AD-while-%E5%BE%AA%E7%8E%AF%E5%8F%98%E9%87%8F%E5%BC%95%E5%8F%91%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
      <description>bash-version: GNU bash, version 3.2.57(1)-release (x86_64-apple-darwin18)
样例 样例 1:
1#!/usr/bin/env bash 2i=0 3echo -e &amp;#34;foo\nbar\nzed&amp;#34; | while read line; do 4 i=$((i + 1)) 5 echo &amp;#34;in loop, i is ${i}&amp;#34; 6done 7 8echo &amp;#34;out loop, i is ${i}&amp;#34; 9 10# output: 11# in loop, i is 1 12# in loop, i is 2 13# in loop, i is 3 14# out loop, i is 0 样例 2:
1#!/usr/bin/env bash 2i=0 3for line in $(echo -e &amp;#34;foo\nbar\nzed&amp;#34;) ; do 4 i=$((i + 1)) 5 echo &amp;#34;in loop, i is ${i}&amp;#34; 6done 7 8echo &amp;#34;out loop, i is ${i}&amp;#34; 9 10# output: 11# in loop, i is 1 12# in loop, i is 2 13# in loop, i is 3 14# out loop, i is 3 问题 为何样例 1 中, 最后打印的 i 的值为 0, 而样例 2 却是 3 ?</description>
    </item>
    
    <item>
      <title>JavaScript 中 isNaN 和 Number.isNaN 的区别</title>
      <link>https://csyakamoz.github.io/post/2021/03/16/javascript-%E4%B8%AD-isnan-%E5%92%8C-number.isnan-%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Tue, 16 Mar 2021 14:37:33 +0800</pubDate>
      
      <guid>https://csyakamoz.github.io/post/2021/03/16/javascript-%E4%B8%AD-isnan-%E5%92%8C-number.isnan-%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>isNaN vs Number.isNaN isNaN: 判断参数是否为 NaN 本身, 或者无法转为数字.
Number.isNaN: 仅判断参数是否为 NaN 本身(完全匹配, 类似于 ===).
例如:
1isNaN({}); 2// &amp;lt;- true, {} is not a number 3// {} 无法转为数字 4 5isNaN(&amp;#34;ponyfoo&amp;#34;); 6// &amp;lt;- true, &amp;#34;ponyfoo&amp;#34; is not a number 7// &amp;#34;ponyfoo&amp;#34; 无法转为数字 8 9isNaN(NaN); 10// &amp;lt;- true, NaN is not a number 11// NaN 本身 12 13isNaN(&amp;#34;pony&amp;#34; / &amp;#34;foo&amp;#34;); 14// &amp;lt;- true, &amp;#34;pony&amp;#34;/&amp;#34;foo&amp;#34; is NaN, NaN is not a number 15// &amp;#34;pony&amp;#34; 和 &amp;#34;foo&amp;#34; 皆无法转为数字, 故 &amp;#39;/&amp;#39; 操作符的结果是 NaN 16 17isNaN(&amp;#34;123&amp;#34;); 18// &amp;lt;- false, &amp;#34;123&amp;#34; 可转为数字 19 20Number.</description>
    </item>
    
    <item>
      <title>Shell 零碎笔记</title>
      <link>https://csyakamoz.github.io/post/2021/01/22/shell-%E9%9B%B6%E7%A2%8E%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Fri, 22 Jan 2021 00:19:44 +0800</pubDate>
      
      <guid>https://csyakamoz.github.io/post/2021/01/22/shell-%E9%9B%B6%E7%A2%8E%E7%AC%94%E8%AE%B0/</guid>
      <description>命令补全 官方文档: man bash, 按 /, 输入 Programmable Completion 回车
团子的小窝 - 编写 Bash 补全脚本
如何编写 bash 自动补全脚本
检查某命令是否存在 来源: How can I check if a program exists from a Bash script?
1command -v &amp;lt;the_command&amp;gt; 例子:
1if ! command -v COMMAND &amp;amp;&amp;gt; /dev/null 2then 3 echo &amp;#34;COMMAND could not be found&amp;#34; 4 exit 5fi &amp;amp;&amp;gt; 的意思可见: What are the shell&amp;rsquo;s control and redirection operators? or What&amp;rsquo;s the accurate meaning of “exec &amp;amp;&amp;gt;/var/log/a.</description>
    </item>
    
    <item>
      <title>RabbitMQ 交换机类型</title>
      <link>https://csyakamoz.github.io/post/2020/09/09/rabbitmq-%E4%BA%A4%E6%8D%A2%E6%9C%BA%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Wed, 09 Sep 2020 16:38:46 +0800</pubDate>
      
      <guid>https://csyakamoz.github.io/post/2020/09/09/rabbitmq-%E4%BA%A4%E6%8D%A2%E6%9C%BA%E7%B1%BB%E5%9E%8B/</guid>
      <description>RabbitMQ 的交换机共有四种类型。
fanout - 扇形 direct - 直连 topic - 主题 headers - 头（尚未了解，此文不说明） 1/** 2 * 发布消息到指定交换机 3 * @param {string} exchange - 交换机名 4 * @param {string} routingKey - 该消息的路由键 5 * @param {string} content - 消息内容 6 */ 7channel.publish(exchange, routingKey, content); 8 9/** 10 * 将队列与交换机进行绑定 11 * @param {string} queue - 队列名 12 * @param {string} exchange - 交换机名 13 * @param {string} bindingKey - 绑定路由 14 */ 15change.</description>
    </item>
    
    <item>
      <title>RabbitMQ 笔记</title>
      <link>https://csyakamoz.github.io/post/2020/09/09/rabbitmq-%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Wed, 09 Sep 2020 16:35:55 +0800</pubDate>
      
      <guid>https://csyakamoz.github.io/post/2020/09/09/rabbitmq-%E7%AC%94%E8%AE%B0/</guid>
      <description>RabbitMQ 官方教程
名词 生产者 (Producing): 发送消息到交换机
路由键 (Routing Key): 消息属性，由生产者在发送消息时声明
交换机 (Exchange): 接受来自生产者的消息，并将消息分发给满足条件的队列
绑定路由 (Binding Key): 用于绑定交换机与队列
队列 (Queue): 消息存储的地方；接受来自交换机的消息，并在存有消费者的情况下，将消息发给消费者
消费者 (Consuming): 从队列中接收消息，并做对应的处理
消息传递流程 生产者 -&amp;gt; 交换机 -&amp;gt; 队列 -&amp;gt; 消费者
生产者的每个消息只能发给一个交换机；生成者发送的时候，可指定该消息的路由键
交换机每收到一个消息，则将该消息发送给满足条件的队列；若没有队列满足条件，则丢弃该消息
交换机是否转发给队列，由交换机类型，交换机队列的绑定路由共同决定
交换机可以跟多个队列使用绑定路由，也可以跟同个队列绑定不同的绑定路由
队列收到消息后，会存储该消息，直到有消费者订阅该队列
代码样例 1// Producing 2 3const amqp = require(&amp;#34;amqplib&amp;#34;); 4 5const ExchangeName = &amp;#34;exchange-name&amp;#34;; 6const ExchangeType = &amp;#34;exchange-type&amp;#34;; // fanout | direct | topic | headers 7 8const MsgRoutingKey = &amp;#34;msg-routing-key&amp;#34;; 9 10(async () =&amp;gt; { 11 const connection = await amqp.</description>
    </item>
    
    <item>
      <title>Git 笔记</title>
      <link>https://csyakamoz.github.io/post/2020/09/09/git-%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Wed, 09 Sep 2020 16:29:42 +0800</pubDate>
      
      <guid>https://csyakamoz.github.io/post/2020/09/09/git-%E7%AC%94%E8%AE%B0/</guid>
      <description>初始化 1git config --global user.name &amp;#34;your name&amp;#34; 2git config --global user.email &amp;#34;yourEmail@example.com&amp;#34; 文件的状态 未跟踪 (untracked) 已跟踪 (tracked) 未修改 (unmodified) 已修改 (modified) 已暂存 (staged) 已提交 (committed) 未修改和已提交本质上是同一种状态
三个工作区域 工作目录 (Working Directory) 暂存区域 (Staging Area) 仓库 (Repository) gitignore 开头结尾皆无 /, 表示忽略所有符合规则的文件或目录；
以 / 结尾表示忽略目录，dist/ 即忽略所有 dist 目录；
以 / 开头表示忽略相对于根目录的目标，/.setting 即忽略根目录下的 .setting 文件或目录，/dist/ 即忽略根目录下的 dist 目录；
! 开头表示取反，即忽略指定模式以外的文件或目录；
glob * 匹配任意数量的任意字符：
Law*, 匹配 Law, Laws, Lawyer, 但不匹配 GrokLaw, La, aw
? 匹配任意一个字符：</description>
    </item>
    
    <item>
      <title>Javascript this 的指向</title>
      <link>https://csyakamoz.github.io/post/2020/09/09/javascript-this-%E7%9A%84%E6%8C%87%E5%90%91/</link>
      <pubDate>Wed, 09 Sep 2020 16:14:29 +0800</pubDate>
      
      <guid>https://csyakamoz.github.io/post/2020/09/09/javascript-this-%E7%9A%84%E6%8C%87%E5%90%91/</guid>
      <description>1// Notice: the environment is Node.js 2 3global.val = &amp;#34;global&amp;#34;; 4this.val = &amp;#34;exports&amp;#34;; 5 6function normalFun() { 7 console.log(this.val); 8} 9 10const funcExpression = function () { 11 console.log(this.val); 12}; 13 14const arrowFun = () =&amp;gt; { 15 console.log(this.val); 16}; 17 18const scope = { 19 val: &amp;#34;obj&amp;#34;, 20 21 a: function () { 22 console.log(this.val); 23 }, 24 25 b: () =&amp;gt; { 26 console.log(this.val); 27 }, 28 29 c: function () { 30 return () =&amp;gt; { 31 console.</description>
    </item>
    
    <item>
      <title>forEach With Async Function in Js</title>
      <link>https://csyakamoz.github.io/post/2020/09/09/foreach-with-async-function-in-js/</link>
      <pubDate>Wed, 09 Sep 2020 14:05:20 +0800</pubDate>
      
      <guid>https://csyakamoz.github.io/post/2020/09/09/foreach-with-async-function-in-js/</guid>
      <description>1const sleep = (ms) =&amp;gt; 2 new Promise((resolve) =&amp;gt; setTimeout(() =&amp;gt; resolve(ms), ms * 1000)); 假设我们需要对数组中的三个元素进行异步操作，而且要按顺序。
即，对数组中的元素按顺序调用异步函数（本文为 sleep)，我们也许会用 Array.prototype.forEach 写出下面的代码：
1(async () =&amp;gt; { 2 const begin = Date.now(); 3 const arr = [1, 2, 3]; 4 arr.forEach(async (num) =&amp;gt; { 5 console.log(await sleep(num)); 6 }); 7 8 console.log(&amp;#34;finish&amp;#34;); 9 const end = Date.now(); 10 console.log(`time: ${end - begin}`); 11})(); 我们期待的结果为：
11 22 33 4finish 5time: x // x &amp;gt;= 6000 但执行上述代码后，你将获得如下结果：</description>
    </item>
    
    <item>
      <title>Xor Cipher - 异或加密的应用场景之一</title>
      <link>https://csyakamoz.github.io/post/2020/09/09/xor-cipher-%E5%BC%82%E6%88%96%E5%8A%A0%E5%AF%86%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%E4%B9%8B%E4%B8%80/</link>
      <pubDate>Wed, 09 Sep 2020 13:24:09 +0800</pubDate>
      
      <guid>https://csyakamoz.github.io/post/2020/09/09/xor-cipher-%E5%BC%82%E6%88%96%E5%8A%A0%E5%AF%86%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%E4%B9%8B%E4%B8%80/</guid>
      <description>异或加密是一种简单的加密算法。
具体内容请看下列文章：
XOR cipher XOR 加密简介 本文只讨论个人所应用到的场景。
需求 在工作中，个人经常遇到使用 UUID 作为各种对象 ID 的场景。
例如：对于每一个 song，我们都为其生成唯一的 quiz，song &amp;amp; quiz 的 ID 都是 uuid；因此，每一个 song 都和其唯一的 quiz 绑定。
需求是：songId &amp;amp; quizId 可以双向查找；即，可通过 songId 查找到对应的 quizId，也可通过 quizId 查找到对应的 songId。
解决方案 方案 0 - 数据库存储映射 两种存储方式：
song 表添加 quizId 列，quiz 表则添加 songId 列 建立新表 song-quiz, songId 和 quizId 作为联合主键 方案 2 - 异或加密当作映射 如果不想将映射关系存到数据库中，则可以使用异或加密。
使用异或后，我们所需存储的仅有 key。
Wiki 上有 python 的实现方案，这里则展示 Node.js 的实现方案。
1/** 2 * @param {&amp;#39;ascii&amp;#39; | &amp;#39;utf8&amp;#39; | &amp;#39;utf16le&amp;#39; | &amp;#39;ucs2&amp;#39; | &amp;#39;base64&amp;#39; | &amp;#39;latin1&amp;#39; | &amp;#39;binary&amp;#39; | &amp;#39;hex&amp;#39;} encoding 编码格式 3 * @param {string} key 密钥 4 * @param {string} text 待加密（解密）的文本 5 * @returns {string} 加密（解密）后的文本 6 */ 7function XorCipher(encoding, key, text) { 8 if (typeof text !</description>
    </item>
    
    <item>
      <title>Shell 基础</title>
      <link>https://csyakamoz.github.io/post/2020/09/09/shell-%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Wed, 09 Sep 2020 11:35:19 +0800</pubDate>
      
      <guid>https://csyakamoz.github.io/post/2020/09/09/shell-%E5%9F%BA%E7%A1%80/</guid>
      <description>Manual Bash Reference Manual
Lint ShellCheck, a static analysis tool for shell scripts
建议使用 ShellCheck, 以检查脚本中潜在的问题
Shebang shebang 即 #! , 其后面跟的是解释当前脚本的解释器路径
e.g.
#!/bin/bash #!/usr/bin/bash #!/usr/bin/env bash 个人习惯用 #!/usr/bin/env NAME 而不是 #!/usr/bin/NAME
原因请看此：Why is it better to use “#!/usr/bin/env NAME” instead of “#!/path/to/NAME” as my shebang?
变量 定义 variable=value
不需要指定变量类型，即不需要说明是整型类型，还是字符串类型等等 等号两侧不能有空格 使用 $variable ${variable} {} 是可选的，但建议加上，{} 是为了帮助解释器识别变量的边界
1for skill in Ada Coffee Action Java; do 2 echo &amp;#34;I am good at ${skill}Script&amp;#34; 3done 如果不给 skill 加上花括号，解释器会把 skillScript 当作变量，在上面的情况下，其值为空</description>
    </item>
    
    <item>
      <title>MacOS 修复音视频无法正常播放问题</title>
      <link>https://csyakamoz.github.io/post/2020/09/09/macos-%E4%BF%AE%E5%A4%8D%E9%9F%B3%E8%A7%86%E9%A2%91%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E6%92%AD%E6%94%BE%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 09 Sep 2020 11:32:06 +0800</pubDate>
      
      <guid>https://csyakamoz.github.io/post/2020/09/09/macos-%E4%BF%AE%E5%A4%8D%E9%9F%B3%E8%A7%86%E9%A2%91%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E6%92%AD%E6%94%BE%E9%97%AE%E9%A2%98/</guid>
      <description>内容来源：mac 音频及视频均无法正常播放，怎么解决？
表现现象：
音乐播放器无法播放，进度条停留在起始点，且为缓冲状态，但网络是正常
BiliBili 也无法播放音频，进度条同上，但网络是正常
任何可以让 mac 发出声音的行为均不出声
重启一切正常
解决办法：terminal 下输入 sudo killall coreaudiod</description>
    </item>
    
    <item>
      <title>Tmux 笔记</title>
      <link>https://csyakamoz.github.io/post/2020/09/09/tmux-%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Wed, 09 Sep 2020 11:26:08 +0800</pubDate>
      
      <guid>https://csyakamoz.github.io/post/2020/09/09/tmux-%E7%AC%94%E8%AE%B0/</guid>
      <description>Tmux with iTerm2 iTerm2 is integrated with tmux, allowing you to enjoy a native user interface with all the benefits of tmux&amp;rsquo;s persistence.
MacOS 用户建议使用 iTerm2 的 Tmux 特性
使用方法, 请看文档:tmux Integration
Notice: 远程服务器也能使用, 但 tmux 版本至少为 1.8, 但推荐 2.3 及之后
Notice: 个人已不再使用 iTerm2 🐶
配置 有时候需要使用原生 tmux, 此时使用该配置
常用命令和快捷键 prefix- 则意味着需要先按 prefix 键
Session 1# 创建新 session 2tmux [new -s session-name] 3 4# 恢复 session 5tmux a [-t session-name] 6 7# 列出所有 session 8tmux ls 9 10# 关闭特定的 session 11tmux kill-session -t session-name 12 13# 关闭所有 session 14tmux kill-server 1# 创建新 session 2prefix-:new [-s session-name] 3 4# 列出所有 session 5prefix-s 6 7# 重命名当前 session 8prefix-$ 9 10# 退出当前 session 11prefix-d Window 1# 创建新 window 2prefix-c 3 4# 列出所有 window 5prefix-w 6 7# 关闭当前 window 8prefix-&amp;amp; 9 10# 前一个 window 11prefix-p 12 13# 后一个 window 14prefix-n 15 16# 重命名当前 window 17prefix-, 18 19# 调整 window 排序 source 默认是当前窗口序号，target 是目标窗口序号 20prefix-:swap-window [-s source] -t target 21 22# 跳转到第 n 个 window 23prefix-n（数字） Pane 1# 垂直分割 2prefix-| 3 4# 水平分割 5prefix-- 6 7# 关闭当前 pane 8prefix-x 9 10# 显示 pane 编号，在编号消失前输入对应的数字可切换到相应的 pane 11prefix-q 12 13# 切换 pane 布局 14prefix-&amp;lt;space&amp;gt; 15 16# 光标移动到左，下，上，右方的 pane 17prefix-h, j, k, l 18 19# 当前窗格往左，下，上，右方扩大 5 格，^ 为 Ctrl 20prefix-^h, ^j, ^k, ^l 21 22# 临时最大化当前 pane, 再次使用则恢复 23prefix-z 24 25# 当前 pane 与上一个 pane 交换位置 26prefix-{ 27 28# 当前 pane 与下一个 pane 交换位置 29prefix-} 30 31# 当前 pane 移到新的 window 中 32prefix-!</description>
    </item>
    
    <item>
      <title>Shell 序列表达式</title>
      <link>https://csyakamoz.github.io/post/2020/09/09/shell-%E5%BA%8F%E5%88%97%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Wed, 09 Sep 2020 11:18:01 +0800</pubDate>
      
      <guid>https://csyakamoz.github.io/post/2020/09/09/shell-%E5%BA%8F%E5%88%97%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>格式：{FIRST..LAST[..INCREMENT]}
FIRST 和 LAST 是必需的，用 .. 分隔，中间没有空格，INCREMENT 是可选滴
Example 1echo {1..3} # 1 2 3 2 3echo {3..1} # 3 2 1 4 5echo {0..20..5} # 0 5 10 15 20 6 7echo 0{8..10} # 08 09 010 8 9echo {08..10} # 08 09 10 10 11echo {a..f} # a b c d e f 12 13echo {f..a} # f e d c b a 14 15echo T-{a..f}-T # T-a-T T-b-T T-c-T T-d-T T-e-T T-f-T 16 17echo {A.</description>
    </item>
    
    <item>
      <title>Shell 按行处理文本</title>
      <link>https://csyakamoz.github.io/post/2020/09/09/shell-%E6%8C%89%E8%A1%8C%E5%A4%84%E7%90%86%E6%96%87%E6%9C%AC/</link>
      <pubDate>Wed, 09 Sep 2020 11:15:00 +0800</pubDate>
      
      <guid>https://csyakamoz.github.io/post/2020/09/09/shell-%E6%8C%89%E8%A1%8C%E5%A4%84%E7%90%86%E6%96%87%E6%9C%AC/</guid>
      <description>内容来源：【Shell 脚本】逐行处理文本文件
read 1cat data.dat | while read line 2do 3 echo &amp;#34;${line}&amp;#34; 4done 5 6# or 7 8while read line 9do 10 echo &amp;#34;${line}&amp;#34; 11done &amp;lt; data.dat awk 1cat data.dat | awk &amp;#39;{print $0}&amp;#39; for &amp;hellip; in &amp;hellip; for var in content 表示变量 var 在 content 中循环取值，取值的分隔符由 ${IFS} 确定
1for line in $(cat data.dat) 2do 3 echo &amp;#34;${line}&amp;#34; 4done 如果输入文本每行中没有空格，则 line 在输入文本中按换行符分隔符循环取值。
如果输入文本中包括空格或制表符，则不是换行读取，line 在输入文本中按空格分隔符或制表符或换行符循环取值。
可以通过把 ${IFS} 设置为换行符来达到逐行读取的功能。
${IFS} 的默认值为：空白 （包括：空格，制表符，换行符）.</description>
    </item>
    
    <item>
      <title>Shell 使用模板文件生成文件</title>
      <link>https://csyakamoz.github.io/post/2020/09/09/shell-%E4%BD%BF%E7%94%A8%E6%A8%A1%E6%9D%BF%E6%96%87%E4%BB%B6%E7%94%9F%E6%88%90%E6%96%87%E4%BB%B6/</link>
      <pubDate>Wed, 09 Sep 2020 11:13:35 +0800</pubDate>
      
      <guid>https://csyakamoz.github.io/post/2020/09/09/shell-%E4%BD%BF%E7%94%A8%E6%A8%A1%E6%9D%BF%E6%96%87%E4%BB%B6%E7%94%9F%E6%88%90%E6%96%87%E4%BB%B6/</guid>
      <description>需求来源 有个模板文件，其占位符格式为：${variable}
现需要使用 shell 脚本来动态生成对应文件
实现 假设模板文件内容如下：
1#!/usr/bin/env bash 2 3version=&amp;#34;${version}&amp;#34; 4path=&amp;#34;${path}&amp;#34; 则动态生成对应文件的 shell 脚本可以如下：
1#!/usr/bin/env bash 2 3version=&amp;#34;1.0.0&amp;#34; 4path=&amp;#34;oh my god&amp;#34; 5 6sed \ 7 -e &amp;#34;s/\${version}/${version}/g&amp;#34; \ 8 -e &amp;#34;s/\${path}/${path}/g&amp;#34; \ 9 path_to_template_file \ 10 &amp;gt; path_to_output_file 需要注意的坑 一般我们使用 / 作为 sed 的定界符，但若变量值中包含 /, 则会导致 sed 解析失败
因此我们需要对 / 进行转义
1#!/usr/bin/env bash 2 3function handlingSlash() { 4 echo &amp;#34;$1&amp;#34; | sed -e &amp;#34;s/\//\\\\\//g&amp;#34; 5} 6 7version=&amp;#34;1.0.0&amp;#34; 8path=$(handlingSlash &amp;#34;${HOME}/Desktop/avatar.jpeg&amp;#34;) 9 10sed \ 11 -e &amp;#34;s/\${version}/${version}/g&amp;#34; \ 12 -e &amp;#34;s/\${path}/${path}/g&amp;#34; \ 13 path_to_template_file \ 14 &amp;gt; path_to_output_file 参考 How to replace ${} placeholders in a text file?</description>
    </item>
    
    <item>
      <title>Shell 打印彩色输出</title>
      <link>https://csyakamoz.github.io/post/2020/09/09/shell-%E6%89%93%E5%8D%B0%E5%BD%A9%E8%89%B2%E8%BE%93%E5%87%BA/</link>
      <pubDate>Wed, 09 Sep 2020 11:12:07 +0800</pubDate>
      
      <guid>https://csyakamoz.github.io/post/2020/09/09/shell-%E6%89%93%E5%8D%B0%E5%BD%A9%E8%89%B2%E8%BE%93%E5%87%BA/</guid>
      <description>格式说明 ESC[{attr1};...;{attrN}m
ESC: 转义字符，可选项为 \033, \x1b, \e 表示
m: 母鸡
attr: 控制代码（参见下方表格）
样例 简单的
1echo -e &amp;#34;\033[0;31mRed\033[0m&amp;#34; 2echo -e &amp;#34;\033[0;32mGreen\033[0m&amp;#34; 3 4echo -e &amp;#34;\033[1;31mHighlight Red\033[0m&amp;#34; 5echo -e &amp;#34;\033[1;3;31mHighlight Italic Red\033[0m&amp;#34; 6echo -e &amp;#34;\033[1;3;4;31mHighlight Italic Underline Red\033[0m&amp;#34; 完整的
1# https://askubuntu.com/questions/27314/script-to-display-all-terminal-colors 2for x in {0..8}; do 3 for i in {30..37}; do 4 for a in {40..47}; do 5 echo -ne &amp;#34;\e[$x;$i;$a&amp;#34;&amp;#34;m\\\e[$x;$i;$a&amp;#34;&amp;#34;m\e[0;37;40m &amp;#34; 6 done 7 echo 8 done 9done 10echo &amp;#34;&amp;#34; 参考 以下表格皆来自：ANSI 转义序列</description>
    </item>
    
    <item>
      <title>Shell 常用快捷键</title>
      <link>https://csyakamoz.github.io/post/2020/09/09/shell-%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</link>
      <pubDate>Wed, 09 Sep 2020 11:06:40 +0800</pubDate>
      
      <guid>https://csyakamoz.github.io/post/2020/09/09/shell-%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</guid>
      <description>Up, Ctrl + p, 向上移动光标或显示上一条命令
Down, Ctrl + n, 向下移动或显示下一条命令
Left, Ctrl + b, 光标向左移动一个字符
Right, Ctrl + f, 光标向右移动一个字符
BS, Ctrl + h, 删除光标左边的字符
Del, Ctrl + d, 删除光标右边的字符
Home, Ctrl + a, 跳转到行首
End, Ctrl + e, 跳转到行尾
以上快捷键可在 Mac 中的大多数文本编辑区域使用
e.g.
Google Chrome 的地址栏 Wechat 的聊天内容输入框 Ctrl + m, Ctrl + j, 回车
Ctrl + i, 等价于 Tab
Ctrl + w, 删除光标左边一个单词
Alt + b, 光标向左移动一个单词
Alt + f, 光标向右移动一个单词</description>
    </item>
    
    <item>
      <title>Node.js 创建本地模块</title>
      <link>https://csyakamoz.github.io/post/2020/09/09/node.js-%E5%88%9B%E5%BB%BA%E6%9C%AC%E5%9C%B0%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Wed, 09 Sep 2020 11:00:07 +0800</pubDate>
      
      <guid>https://csyakamoz.github.io/post/2020/09/09/node.js-%E5%88%9B%E5%BB%BA%E6%9C%AC%E5%9C%B0%E6%A8%A1%E5%9D%97/</guid>
      <description>问题来源 在编写代码时，个人习惯会把通用实用模块放在项目根目录下
因为是通用实用模块，若项目层级较多，那么层级较深的文件引用该模块时，会出现这样的代码：
1const Utils = require(&amp;#34;../../../../../../../utils&amp;#34;); 这么多的 .., 如果写少或写多一个 .., 就会报错
Oh, it makes me uncomfortable 😑
因此，需求是可以用简单的路径引用通用实用模块
Solution One 使用 module-alias, 简洁且易用
个人认为只有一个缺点 - 它更改 Module._resolveFilename 方法
Solution Two npm 和 yarn 现已支持安装本地模块
首先需要为本地模块添加 package.json 文件
对于 package.json, 其 name, version 是必需的
本地模块的名字为 package.json 的 name 字段，而不是本地模块所处目录名
假设本地模块相对于项目根目录的路径是 ./local-package-dir, 其在 package.json 文件中的 name 为 local-package
则安装本地模块的方法如下：
1 2# 在 node_modules 中创建软链 local-package 指向 ../local-package-dir 3npm install ./local-package-dir 4 5# 拷贝 .</description>
    </item>
    
    <item>
      <title>Javascript 函数传参类型</title>
      <link>https://csyakamoz.github.io/post/2020/09/09/javascript-%E5%87%BD%E6%95%B0%E4%BC%A0%E5%8F%82%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Wed, 09 Sep 2020 10:54:59 +0800</pubDate>
      
      <guid>https://csyakamoz.github.io/post/2020/09/09/javascript-%E5%87%BD%E6%95%B0%E4%BC%A0%E5%8F%82%E7%B1%BB%E5%9E%8B/</guid>
      <description>曾经我一度将 javascript 函数传参类型分为两种：
基本类型：值传递 引用类型：引用传递 后来我发现，其实都是值传递;
先说明为啥曾经认为引用类型，是引用传递：
1function demo(obj) { 2 obj.foo = &amp;#34;foo&amp;#34;; 3} 4 5let variable = {}; 6 7console.log(variable); // {} 8 9demo(variable); 10 11console.log(variable); // { foo: &amp;#39;foo&amp;#39; } 外部向函数 demo 传递实参 (variable);
函数进行操作：向形参 (obj) 添加一个属性 (foo), 其值为 foo;
um&amp;hellip;, 函数内部的操作，会影响外部的变量，这是很像引用传递，但我们再看个例子：
1function demo(obj) { 2 obj = { foo: &amp;#34;foo&amp;#34; }; 3 obj.bar = &amp;#34;bar&amp;#34;; 4} 5 6let variable = {}; 7 8console.log(variable); // {} 9 10demo(variable); 11 12console.</description>
    </item>
    
    <item>
      <title>JavaScript 遍历对象属性顺序</title>
      <link>https://csyakamoz.github.io/post/2020/09/09/javascript-%E9%81%8D%E5%8E%86%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E9%A1%BA%E5%BA%8F/</link>
      <pubDate>Wed, 09 Sep 2020 10:37:51 +0800</pubDate>
      
      <guid>https://csyakamoz.github.io/post/2020/09/09/javascript-%E9%81%8D%E5%8E%86%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E9%A1%BA%E5%BA%8F/</guid>
      <description>问题来源 1/** 2 * @param {object} obj 3 * @returns {any[]} 4 */ 5function getValues(obj) { 6 // some code or none 7 return Object.values(obj); 8} 9 10const [val0, val1, ..., valN] = getValues(obj); 11doSomethingFor0(val0); 12doSomethingFor1(val1); 13... 14doSomethingForN(valN); getValues 函数参数是对象，返回值是数组
调用者传入对象，再对函数返回的数组，进行如下操作：
对下标为 0 的元素做某事 0 对下标为 1 的元素做某事 1 &amp;hellip; 对下标为 N 的元素做某事 N 在这里，调用者认为，该数组元素排序顺序会如预期所想（声明顺序，插入顺序等等）
实际上，该数组元素排序顺序依赖于遍历对象属性顺序, 但遍历对象属性顺序有时并非等价于对象的声明（插入）顺序，故导致可能出现非预期结果
顺序规则 在 Google 查找相关资料后及个人测试，得到如下结果：
先以三个区间划分，然后区间内再各自排序
非负整数（不包括 n.0 这种）区间，按照从小到大排序 普通的属性名区间，按照声明（插入）顺序排序 Symbol 区间，按照声明（插入）顺序排序 1/** 2 * Object.</description>
    </item>
    
    <item>
      <title>编码风格</title>
      <link>https://csyakamoz.github.io/post/2020/09/09/%E7%BC%96%E7%A0%81%E9%A3%8E%E6%A0%BC/</link>
      <pubDate>Wed, 09 Sep 2020 10:32:18 +0800</pubDate>
      
      <guid>https://csyakamoz.github.io/post/2020/09/09/%E7%BC%96%E7%A0%81%E9%A3%8E%E6%A0%BC/</guid>
      <description>ESLint ESLint is a tool for identifying and reporting on patterns found in ECMAScript/JavaScript code, with the goal of making code more consistent and avoiding bugs.
以下风格都会尽量补充对应的 eslint 规则（如果有且被我发现的话 😑
Notice: 请优先以团队约定为准！
缩进使用空格而不是制表符 尽管制表符更省空间，但还是更喜欢空格
one tab is equal to 2, 4, 8 space
no-tabs 坚持使用分号 纵然很多人依旧坚持不使用分号，但我就喜欢加分号，就这么滴。
semi 坚持使用大括号 即使只有一条语句，也依旧要使用大括号；
同时，else 与 if 的 } 处在统一行；
1// bad 2if (test) return false; 3else return true; 4 5// bad 6if (test) 7 return false; 8else 9 return true; 10 11// bad 12if (test) { 13 return false; 14} 15else { 16 return true; 17} 18 19// good 20if (test) { 21 return false; 22} else { 23 return true; 24} curly brace-style nonblock-statement-body-position const 优于 let, 弃用 var var 的坏处，此处不一一阐述；</description>
    </item>
    
    <item>
      <title>Node.js 调用微信小程序图片校验接口</title>
      <link>https://csyakamoz.github.io/post/2020/09/09/node.js-%E8%B0%83%E7%94%A8%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%9B%BE%E7%89%87%E6%A0%A1%E9%AA%8C%E6%8E%A5%E5%8F%A3/</link>
      <pubDate>Wed, 09 Sep 2020 10:21:33 +0800</pubDate>
      
      <guid>https://csyakamoz.github.io/post/2020/09/09/node.js-%E8%B0%83%E7%94%A8%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%9B%BE%E7%89%87%E6%A0%A1%E9%AA%8C%E6%8E%A5%E5%8F%A3/</guid>
      <description>1const fs = require(&amp;#34;fs&amp;#34;); 2const request = require(&amp;#34;request&amp;#34;); 3 4request.post( 5 { 6 uri: 7 &amp;#34;https://api.weixin.qq.com/wxa/img_sec_check?access_token=ACCESS_TOKEN&amp;#34;, 8 9 formData: { 10 // 方法 1 11 media: fs.createReadStream(&amp;#34;path_to_img&amp;#34;), 12 13 // 方法 2 14 attachments: [ 15 // 只认下标为 0 的 16 fs.createReadStream(&amp;#34;path_to_img&amp;#34;), 17 18 // 下标 1 及之后的会被微信忽略 19 ..., 20 ], 21 22 // 方法 3 23 media: { 24 value: buffer, 25 options: { 26 // 必须有 filename, 值可任意但不能为空串 27 filename: &amp;#34;default&amp;#34;, 28 // contentType 可有可无，且值任意 29 contentType: &amp;#34;image/jpeg&amp;#34;, 30 }, 31 }, 32 33 // 方法 4 34 media: request.</description>
    </item>
    
    <item>
      <title>Node.js 支持的编码</title>
      <link>https://csyakamoz.github.io/post/2020/09/09/node.js-%E6%94%AF%E6%8C%81%E7%9A%84%E7%BC%96%E7%A0%81/</link>
      <pubDate>Wed, 09 Sep 2020 10:19:07 +0800</pubDate>
      
      <guid>https://csyakamoz.github.io/post/2020/09/09/node.js-%E6%94%AF%E6%8C%81%E7%9A%84%E7%BC%96%E7%A0%81/</guid>
      <description> ascii utf8 utf16le ucs2: alias of utf16le base64 latin1 binary: alias for latin1 hex 参考 List of encodings that Node.js supports Buffers and Character Encodings </description>
    </item>
    
  </channel>
</rss>
